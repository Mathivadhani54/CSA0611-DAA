# 0-1 Knapsack Problem using Exhaustive Search

def total_value(items, values):
    return sum(values[i] for i in items)

def is_feasible(items, weights, capacity):
    total_weight = sum(weights[i] for i in items)
    return total_weight <= capacity

def knapsack(weights, values, capacity):
    n = len(weights)
    best_value = 0
    best_combination = []

    for i in range(1 << n):  # Iterate through all possible combinations
        selected_items = [j for j in range(n) if (i & (1 << j)) > 0]
        if is_feasible(selected_items, weights, capacity):
            current_value = total_value(selected_items, values)
            if current_value > best_value:
                best_value = current_value
                best_combination = selected_items

    return best_combination, best_value

# Test Case 1
weights = [2, 3, 1]
values = [4, 5, 3]
capacity = 4

optimal_selection, total_value_result = knapsack(weights, values, capacity)
print("Test Case 1:")
print("Optimal Selection:", optimal_selection)
print("Total Value:", total_value_result)
